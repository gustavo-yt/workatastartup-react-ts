[{"/Users/gustavo/Documents/mbpro/lantern/workatastartup-react-ts/src/index.js":"1","/Users/gustavo/Documents/mbpro/lantern/workatastartup-react-ts/src/reportWebVitals.js":"2","/Users/gustavo/Documents/mbpro/lantern/workatastartup-react-ts/src/App.tsx":"3","/Users/gustavo/Documents/mbpro/lantern/workatastartup-react-ts/src/utils/database.ts":"4","/Users/gustavo/Documents/mbpro/lantern/workatastartup-react-ts/src/utils/constants.ts":"5","/Users/gustavo/Documents/mbpro/lantern/workatastartup-react-ts/src/components/JobSearch.tsx":"6","/Users/gustavo/Documents/mbpro/lantern/workatastartup-react-ts/src/components/CodeBlock.tsx":"7","/Users/gustavo/Documents/mbpro/lantern/workatastartup-react-ts/src/components/JobPreview.tsx":"8","/Users/gustavo/Documents/mbpro/lantern/workatastartup-react-ts/src/components/JobView.tsx":"9"},{"size":535,"mtime":1706303380970,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1706303380970,"results":"12","hashOfConfig":"11"},{"size":2381,"mtime":1706305953313,"results":"13","hashOfConfig":"11"},{"size":1710,"mtime":1706301283357,"results":"14","hashOfConfig":"11"},{"size":662,"mtime":1706301258967,"results":"15","hashOfConfig":"11"},{"size":6319,"mtime":1706304491574,"results":"16","hashOfConfig":"11"},{"size":1105,"mtime":1706301374147,"results":"17","hashOfConfig":"11"},{"size":2034,"mtime":1706301421979,"results":"18","hashOfConfig":"11"},{"size":2876,"mtime":1706304321580,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1cqg6wg",{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"29"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"29"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"42","usedDeprecatedRules":"29"},"/Users/gustavo/Documents/mbpro/lantern/workatastartup-react-ts/src/index.js",[],["43","44"],"/Users/gustavo/Documents/mbpro/lantern/workatastartup-react-ts/src/reportWebVitals.js",[],"/Users/gustavo/Documents/mbpro/lantern/workatastartup-react-ts/src/App.tsx",[],"/Users/gustavo/Documents/mbpro/lantern/workatastartup-react-ts/src/utils/database.ts",[],["45","46"],"/Users/gustavo/Documents/mbpro/lantern/workatastartup-react-ts/src/utils/constants.ts",[],"/Users/gustavo/Documents/mbpro/lantern/workatastartup-react-ts/src/components/JobSearch.tsx",["47"],"'use client';\n\nimport {\n  DEFAULT_EMBEDDING_MODEL,\n  DEFAULT_LONG_INPUT,\n  DEFAULT_SHORT_INPUT,\n  EMBEDDING_MODEL_TO_COLUMN,\n} from '../utils/constants';\nimport { HiSearch, HiX } from 'react-icons/hi';\nimport { useEffect, useState } from 'react';\n\nimport CodeBlock from './CodeBlock';\nimport JobPreview from './JobPreview';\nimport JobView from './JobView';\nimport classNames from 'classnames';\nimport { useDebounce } from '@uidotdev/usehooks';\n\ninterface ButtonProps {\n  children: string;\n}\n\ninterface JobSearchProps {\n  getHtml: (code: string) => Promise<string>;\n  searchJobs: (\n    embeddingModel: string,\n    longInput: string,\n    shortInput: string,\n    country: string\n  ) => Promise<any[]>;\n  getQuery: (\n    embeddingModel: string,\n    longInput: string,\n    shortInput: string,\n    country: string\n  ) => Promise<string>;\n  defaultJobs: any[];\n  defaultQuery: string;\n  defaultHtml: string;\n}\n\nconst JobSearch = ({\n  defaultJobs,\n  defaultQuery,\n  defaultHtml,\n  getHtml,\n  searchJobs,\n  getQuery,\n}: JobSearchProps) => {\n  const [shortInput, setShortInput] = useState(DEFAULT_SHORT_INPUT);\n  const [longInput, setLongInput] = useState(DEFAULT_LONG_INPUT);\n  const [country, setCountry] = useState('');\n  const [embeddingModel, setEmbeddingModel] = useState(DEFAULT_EMBEDDING_MODEL);\n\n  const [job, setJob] = useState<any | undefined>(defaultJobs[0]);\n  const [jobs, setJobs] = useState<any[]>(defaultJobs);\n\n  const [query, setQuery] = useState(defaultQuery);\n\n  const debouncedLongInput = useDebounce(longInput, 1000);\n  const debouncedShortInput = useDebounce(shortInput, 1000);\n  useEffect(() => {\n    searchJobs(\n      embeddingModel,\n      debouncedLongInput,\n      debouncedShortInput,\n      country\n    ).then((jobs) => {\n      getQuery(\n        embeddingModel,\n        debouncedLongInput,\n        debouncedShortInput,\n        country\n      ).then(setQuery);\n      setJobs(jobs);\n      setJob(jobs[0]);\n    });\n  }, [debouncedLongInput, debouncedShortInput, country, embeddingModel]);\n\n  const CountryButton = ({ children }: ButtonProps) => (\n    <button\n      className={classNames(\n        'py-1 px-4 rounded-full text-sm',\n        country === children\n          ? 'bg-slate-400 text-white'\n          : 'border border-slate-200 bg-white hover:bg-slate-100'\n      )}\n      onClick={() => setCountry(country === children ? '' : children)}\n    >\n      {children}\n    </button>\n  );\n\n  const EmbeddingModelButton = ({ children }: ButtonProps) => (\n    <button\n      className={classNames(\n        'py-1 px-4 rounded-full text-sm',\n        embeddingModel === children\n          ? 'bg-slate-400 text-white'\n          : 'border border-slate-200 bg-white hover:bg-slate-100'\n      )}\n      onClick={() => setEmbeddingModel(children)}\n    >\n      {children}\n    </button>\n  );\n\n  return (\n    <div className='flex'>\n      <div className='flex-none w-[650px] px-5 flex flex-col gap-y-8 bg-slate-50 border-r-4 border-slate-100 min-h-screen'>\n        <div>\n          <div className='h-24 pt-8'>\n            <h1 className='text-3xl font-bold'>Find a Startup Job</h1>\n          </div>\n\n          <p className='mb-3 text-lg'>Search with keywords</p>\n          <div className='border border-slate-200 rounded bg-white flex items-center p-2'>\n            <input\n              value={shortInput}\n              onChange={(e) => setShortInput(e.target.value)}\n              placeholder='Job title, keywords, or company'\n              className='w-full text-sm focus:outline-none'\n            />\n            {shortInput ? (\n              <HiX\n                onClick={() => setShortInput('')}\n                className='text-slate-500'\n              />\n            ) : (\n              <HiSearch className='text-slate-500' />\n            )}\n          </div>\n        </div>\n\n        <div>\n          <p className='mb-3 text-lg'>Tell us about you</p>\n          <textarea\n            value={longInput}\n            onChange={(e) => setLongInput(e.target.value)}\n            className='border border-slate-200 rounded text-slate-700 w-full h-28 p-2 text-sm'\n          />\n        </div>\n\n        <div>\n          <p className='mb-3 text-lg'>Country Filter</p>\n          <div className='flex gap-x-2'>\n            <CountryButton>US</CountryButton>\n            <CountryButton>IN</CountryButton>\n            <CountryButton>GB</CountryButton>\n            <CountryButton>CA</CountryButton>\n          </div>\n        </div>\n\n        <div>\n          <p className='mb-3 text-lg'>Embedding model</p>\n          <div className='flex gap-x-2'>\n            {Object.keys(EMBEDDING_MODEL_TO_COLUMN).map((model) => (\n              <EmbeddingModelButton key={model}>{model}</EmbeddingModelButton>\n            ))}\n          </div>\n        </div>\n\n        <div>\n          <p className='mb-3 text-lg'>Generated SQL Query</p>\n          <CodeBlock defaultHtml={defaultHtml} code={query} getHtml={getHtml} />\n          <p className='mt-4 text-sm'>\n            Note: <i>{EMBEDDING_MODEL_TO_COLUMN[embeddingModel]}</i> was\n            generated with Lantern.dev's{' '}\n            <a\n              href='https://lantern.dev/docs/develop/columns'\n              className='font-medium'\n            >\n              embedding generation feature\n            </a>\n          </p>\n          <p className='mt-2 text-sm'>\n            Note: <i>description_tsvector</i> was generated with to_tsvector\n          </p>\n        </div>\n      </div>\n\n      <div className='w-full px-12'>\n        <div>\n          <div className='h-24 pt-8'>\n            <h1 className='text-3xl'>\n              ðŸ’¥ Vector generation and search powered by{' '}\n              <a href='https://lantern.dev' className='text-slate-400'>\n                Lantern.dev\n              </a>\n            </h1>\n          </div>\n\n          <p className='mb-3 text-lg'>Results</p>\n          <div className='grid grid-cols-3 gap-x-8'>\n            {jobs.map((job_, idx) => (\n              <JobPreview\n                key={job_.id}\n                idx={idx + 1}\n                job={job_}\n                activeJob={job}\n                setActiveJob={setJob}\n              />\n            ))}\n          </div>\n        </div>\n        <div className='mt-10 border-t-2 border-slate-100 pt-10 pb-10'>\n          {job && <JobView job={job} />}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default JobSearch;","/Users/gustavo/Documents/mbpro/lantern/workatastartup-react-ts/src/components/CodeBlock.tsx",["48"],"'use client';\n\nimport { useEffect, useState } from 'react';\n\nimport DOMPurify from 'isomorphic-dompurify';\nimport { FaClipboard } from 'react-icons/fa';\n\ninterface CodeBlockProps {\n  code: string;\n  getHtml: (code: string) => Promise<string>;\n  defaultHtml: string;\n}\n\nconst CodeBlock = ({ code, defaultHtml, getHtml }: CodeBlockProps) => {\n  const [html, setHtml] = useState(defaultHtml);\n  useEffect(() => {\n    getHtml(code).then((html) => setHtml(DOMPurify.sanitize(html)));\n  }, [code]);\n  return (\n    <div className='text-xs'>\n      <div className='flex items-center px-4 py-2 border border-b-0 rounded-t bg-slate-200'>\n        <p className='mr-auto'>sql</p>\n        <div\n          className='flex items-center gap-2 cursor-pointer'\n          onClick={() => navigator.clipboard.writeText(code)}\n        >\n          <FaClipboard />\n          <p>copy code</p>\n        </div>\n      </div>\n      <div\n        className='p-4 overflow-x-auto bg-white border border-t-0 rounded-b'\n        dangerouslySetInnerHTML={{\n          __html: html,\n        }}\n      />\n    </div>\n  );\n};\n\nexport default CodeBlock;","/Users/gustavo/Documents/mbpro/lantern/workatastartup-react-ts/src/components/JobPreview.tsx",[],"/Users/gustavo/Documents/mbpro/lantern/workatastartup-react-ts/src/components/JobView.tsx",["49"],"import DOMPurify from 'isomorphic-dompurify';\nimport { HiArrowRight } from 'react-icons/hi';\nimport _ from 'lodash';\nimport { formatLocationWithWorkplace } from './JobPreview';\nimport getSymbolFromCurrency from 'currency-symbol-map';\n\nfunction formatDate(job: any) {\n  const { date } = job;\n  if (!date) return;\n  const dateObj = new Date(date);\n  return dateObj.toLocaleDateString('en-US', {\n    month: 'long',\n    day: 'numeric',\n    year: 'numeric',\n  });\n}\n\nfunction formatSalaryRange(job: any) {\n  const { salaryLow, salaryHigh, salaryLowCurrency, salaryHighCurrency } = job;\n  let formattedSalary = '';\n\n  if (salaryLow && salaryHigh) {\n    const salaryLowStr = formatSalary(salaryLow, salaryLowCurrency);\n    const salaryHighStr = formatSalary(salaryHigh, salaryHighCurrency);\n    formattedSalary = `${salaryLowStr} - ${salaryHighStr}`;\n  } else if (salaryLow) {\n    const salaryLowStr = formatSalary(salaryLow, salaryLowCurrency);\n    formattedSalary = `${salaryLowStr} and above`;\n  } else if (salaryHigh) {\n    const salaryHighStr = formatSalary(salaryHigh, salaryHighCurrency);\n    formattedSalary = `${salaryHighStr} and below`;\n  }\n\n  return formattedSalary;\n}\n\nfunction formatSalary(amount: number, currency: string | null) {\n  const currencySymbol = getSymbolFromCurrency(currency || 'USD');\n  return `${currencySymbol}${amount.toLocaleString()}`;\n}\n\ninterface JobViewProps {\n  job: any;\n}\n\nconst JobView = ({ job }: JobViewProps) => {\n  const location = formatLocationWithWorkplace(job);\n  const dateString = formatDate(job);\n  const salaryRange = formatSalaryRange(job);\n  const information: string[] = [];\n  if (job.companyName) {\n    information.push(job.companyName);\n  }\n  if (location) {\n    information.push(location);\n  }\n  if (job.type) {\n    information.push(_.capitalize(job.type.replace('_', ' ')));\n  }\n  return (\n    <div>\n      <div className='flex justify-between mb-8'>\n        <div>\n          <h2 className='text-2xl mb-2'>{job.title}</h2>\n          <p>{information.join(' Â· ')}</p>\n          {salaryRange && <p className='mt-1'>Compensation: {salaryRange}</p>}\n        </div>\n        {job.url && (\n          <a href={job.url} target='_blank'>\n            <button className='bg-slate-700 rounded-full px-4 py-2 tracking-wide text-sm text-white hover:bg-slate-800 flex'>\n              Apply on Y Combinator\n              <HiArrowRight className='ml-2 mt-0.5' />\n            </button>\n          </a>\n        )}\n      </div>\n\n      {job.description && <p className='text-lg mb-5'>About the job</p>}\n      {job.description && (\n        <div\n          className='text-sm'\n          dangerouslySetInnerHTML={{\n            __html: DOMPurify.sanitize(job.description),\n          }}\n        />\n      )}\n\n      {dateString && (\n        <p className='mt-8 text-slate-400'>Posted on {dateString}.</p>\n      )}\n    </div>\n  );\n};\n\nexport default JobView;",{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":77,"column":6,"nodeType":"56","endLine":77,"endColumn":72,"suggestions":"57"},{"ruleId":"54","severity":1,"message":"58","line":18,"column":6,"nodeType":"56","endLine":18,"endColumn":12,"suggestions":"59"},{"ruleId":"60","severity":1,"message":"61","line":69,"column":11,"nodeType":"62","messageId":"63","endLine":69,"endColumn":45,"fix":"64"},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getQuery' and 'searchJobs'. Either include them or remove the dependency array. If 'searchJobs' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["67"],"React Hook useEffect has a missing dependency: 'getHtml'. Either include it or remove the dependency array. If 'getHtml' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["68"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"69","text":"70"},"no-global-assign","no-unsafe-negation",{"desc":"71","fix":"72"},{"desc":"73","fix":"74"},[2176,2176]," rel=\"noreferrer\"","Update the dependencies array to be: [debouncedLongInput, debouncedShortInput, country, embeddingModel, searchJobs, getQuery]",{"range":"75","text":"76"},"Update the dependencies array to be: [code, getHtml]",{"range":"77","text":"78"},[1934,2000],"[debouncedLongInput, debouncedShortInput, country, embeddingModel, searchJobs, getQuery]",[484,490],"[code, getHtml]"]